// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=service_mock.go -package=service
//
// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPeople is a mock of People interface.
type MockPeople struct {
	ctrl     *gomock.Controller
	recorder *MockPeopleMockRecorder
}

// MockPeopleMockRecorder is the mock recorder for MockPeople.
type MockPeopleMockRecorder struct {
	mock *MockPeople
}

// NewMockPeople creates a new mock instance.
func NewMockPeople(ctrl *gomock.Controller) *MockPeople {
	mock := &MockPeople{ctrl: ctrl}
	mock.recorder = &MockPeopleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeople) EXPECT() *MockPeopleMockRecorder {
	return m.recorder
}

// Say mocks base method.
func (m *MockPeople) Say() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Say")
	ret0, _ := ret[0].(string)
	return ret0
}

// Say indicates an expected call of Say.
func (mr *MockPeopleMockRecorder) Say() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Say", reflect.TypeOf((*MockPeople)(nil).Say))
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockDB) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockDBMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockDB)(nil).GetName))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockServer) Get() DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(DB)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockServerMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServer)(nil).Get))
}
