// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: author_query.sql

package author

import (
	"context"
	"database/sql"

	dto "sqlc-demo/model/dto"
)

const createAuthor = `-- name: CreateAuthor :execresult
insert into author (
    name, bio, config
) values (
    ?, ?, ?
)
`

type CreateAuthorParams struct {
	Name   string            `json:"name"`
	Bio    *string           `json:"bio"`
	Config *dto.AuthorConfig `json:"config"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAuthor, arg.Name, arg.Bio, arg.Config)
}

const deleteAuthor = `-- name: DeleteAuthor :exec
delete from author where id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
select id, name, bio, config from author where id = ?
`

func (q *Queries) GetAuthor(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, id)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Bio,
		&i.Config,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
select id, name, bio, config from author
order by name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Bio,
			&i.Config,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
